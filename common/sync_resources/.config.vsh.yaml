name: "sync_resources"
namespace: "common"
version: "dev"
argument_groups:
- name: "Arguments"
  arguments:
  - type: "file"
    name: "--input"
    alternatives:
    - "-i"
    description: "Path _viash.yaml file with s3 path to resources."
    info: null
    default:
    - "_viash.yaml"
    must_exist: true
    create_parent: true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ";"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Path to the test resource directory."
    info: null
    default:
    - "/resources_test"
    must_exist: true
    create_parent: true
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ";"
  - type: "boolean_true"
    name: "--quiet"
    description: "Displays the operations that would be performed using the specified\
      \ command without actually running them."
    info: null
    direction: "input"
  - type: "boolean_true"
    name: "--dryrun"
    description: "Does not display the operations performed from the specified command."
    info: null
    direction: "input"
  - type: "boolean_true"
    name: "--delete"
    description: "Files that exist in the destination but not in the source are deleted\
      \ during sync."
    info: null
    direction: "input"
  - type: "string"
    name: "--exclude"
    description: "Exclude all files or objects from the command that matches the specified\
      \ pattern."
    info: null
    required: false
    direction: "input"
    multiple: true
    multiple_sep: ";"
resources:
- type: "bash_script"
  path: "script.sh"
  is_executable: true
description: "Synchronise the resources from s3 to resources_test"
usage: "sync_resources\nsync_resources --input _viash.yaml --output resources_test\n"
test_resources:
- type: "bash_script"
  path: "run_test.sh"
  is_executable: true
info: null
status: "enabled"
license: "MIT"
links:
  repository: "https://github.com/openproblems-bio/common_resources"
  docker_registry: "ghcr.io"
runners:
- type: "executable"
  id: "executable"
  docker_setup_strategy: "ifneedbepullelsecachedbuild"
- type: "nextflow"
  id: "nextflow"
  directives:
    tag: "$id"
  auto:
    simplifyInput: true
    simplifyOutput: false
    transcript: false
    publish: false
  config:
    labels:
      mem1gb: "memory = 1000000000.B"
      mem2gb: "memory = 2000000000.B"
      mem5gb: "memory = 5000000000.B"
      mem10gb: "memory = 10000000000.B"
      mem20gb: "memory = 20000000000.B"
      mem50gb: "memory = 50000000000.B"
      mem100gb: "memory = 100000000000.B"
      mem200gb: "memory = 200000000000.B"
      mem500gb: "memory = 500000000000.B"
      mem1tb: "memory = 1000000000000.B"
      mem2tb: "memory = 2000000000000.B"
      mem5tb: "memory = 5000000000000.B"
      mem10tb: "memory = 10000000000000.B"
      mem20tb: "memory = 20000000000000.B"
      mem50tb: "memory = 50000000000000.B"
      mem100tb: "memory = 100000000000000.B"
      mem200tb: "memory = 200000000000000.B"
      mem500tb: "memory = 500000000000000.B"
      mem1gib: "memory = 1073741824.B"
      mem2gib: "memory = 2147483648.B"
      mem4gib: "memory = 4294967296.B"
      mem8gib: "memory = 8589934592.B"
      mem16gib: "memory = 17179869184.B"
      mem32gib: "memory = 34359738368.B"
      mem64gib: "memory = 68719476736.B"
      mem128gib: "memory = 137438953472.B"
      mem256gib: "memory = 274877906944.B"
      mem512gib: "memory = 549755813888.B"
      mem1tib: "memory = 1099511627776.B"
      mem2tib: "memory = 2199023255552.B"
      mem4tib: "memory = 4398046511104.B"
      mem8tib: "memory = 8796093022208.B"
      mem16tib: "memory = 17592186044416.B"
      mem32tib: "memory = 35184372088832.B"
      mem64tib: "memory = 70368744177664.B"
      mem128tib: "memory = 140737488355328.B"
      mem256tib: "memory = 281474976710656.B"
      mem512tib: "memory = 562949953421312.B"
      cpu1: "cpus = 1"
      cpu2: "cpus = 2"
      cpu5: "cpus = 5"
      cpu10: "cpus = 10"
      cpu20: "cpus = 20"
      cpu50: "cpus = 50"
      cpu100: "cpus = 100"
      cpu200: "cpus = 200"
      cpu500: "cpus = 500"
      cpu1000: "cpus = 1000"
  debug: false
  container: "docker"
engines:
- type: "docker"
  id: "docker"
  image: "amazon/aws-cli:2.17.11"
  namespace_separator: "/"
  setup:
  - type: "yum"
    packages:
    - "wget"
  - type: "docker"
    run:
    - "wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64\
      \ -O /usr/bin/yq && \\\nchmod +x /usr/bin/yq\n"
  entrypoint: []
  cmd: null
build_info:
  config: "src/sync_resources/config.vsh.yaml"
  runner: "executable"
  engine: "docker"
  output: "sync_resources"
  executable: "sync_resources/sync_resources"
  viash_version: "0.9.0-RC6"
  git_commit: "7bd60870f551dd252f8316467e710ab0d9440bfa"
  git_remote: "git@github.com:openproblems-bio/common-resources.git"
package_config:
  name: "common_resources"
  version: "dev"
  description: "Common resources for the OpenProblems project.\n"
  info: null
  viash_version: "0.9.0-RC6"
  source: "src"
  target: ""
  keywords:
  - "openproblems"
  - "common-resources"
  - "single-cell"
  - "benchmark"
  license: "MIT"
  organization: "openproblems-bio"
  links:
    repository: "https://github.com/openproblems-bio/common_resources"
    docker_registry: "ghcr.io"
    issue_tracker: "https://github.com/openproblems-bio/common_resources/issues"
